(#%require (only racket/base current-inexact-milliseconds))
(define (runtime) (current-inexact-milliseconds))

(define (divides? a b) (= (remainder b a) 0))
(define (prime? n)
  (define (find-divisor start-divisor)
      (cond ((> (* start-divisor start-divisor) n) n)
            ((divides? start-divisor n) start-divisor)
            (else (find-divisor (+ start-divisor 1)))))
  (= (find-divisor 2) n))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))
      void))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (even? i)
  (= (remainder i 2) 0))

(define (search-for-primes start end)
  (define (search-for-primes-iter i)
    (cond ((> i end) void)
          ((even? i) (search-for-primes-iter (+ i 1)))
          (else (timed-prime-test i)
                (search-for-primes-iter (+ i 2)))))
  (search-for-primes-iter start)
  (newline))
